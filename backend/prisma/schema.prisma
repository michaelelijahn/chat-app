// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  username        String   @unique
  fullName        String
  password        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  conversationIds String[]
  loginAttempts   Int      @default(5)
  tokens          Token[]
  publicKey       String

  conversations Conversation[]
  chats         Chat[]

  friends                   User[]                      @relation("Friendship")
  friendsOf                 User[]                      @relation("Friendship")
}

model Token {
  id           String   @id @default(cuid())
  userId       String
  refreshToken String   @unique
  isValid      Boolean
  expiresAt    DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberIds String[]
  members   User[]

  chatIds                   String[]
  chats                     Chat[]
}

model Chat {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  senderId       String
  sender         User         @relation(fields: [senderId], references: [id])
  encryptedContent   String
  senderEncryptedAESKey String
  receiverEncryptedAESKey String
  iv String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}